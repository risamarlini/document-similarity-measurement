Praktikum 1 
Nim : 12S16060 
Nama : Wiwin Putri Gurning 
 
 
A. Source Code Romania Map 
BFS 
romania_map = {"Arad": set ( ["Zerind", "Sibiu", "Timisoara"]), 
         "Sibiu": set (["Faragas", "Rimnicu", "Oradeo"]), 
         "Zerind": set (["Oradeo"]), 
         "Oradeo": set ([]), 
         "Timisoara": set (["Lugoj"]), 
         "Lugoj": set (["Mehadia"]), 
         "Mehadia": set (["Drobeta"]), 
         "Drobeta" : set (["Craiova"]), 
         "Rimnicu": set (["Craiova", "Pitesti"]), 
         "Craiova": set ( ["Pitesti"]), 
         "Faragas" : set (["Bucharest"]), 
         "Pitesti" : set (["Bucharest"]), 
         "Bucharest" : set (["Urziceni", "Giurgiu"]), 
         "Urziceni" : set (["Hirsova", "Vaslui"]), 
         "Giurgiu" : set ([]), 
         "Hirsova" : set (["Eforie"]), 
         "Eforie" : set([]), 
         "Vaslui" : set (["Iasi"]), 
         "Iasi" : set (["Neamt"]), 
         "Neamt" : set([]) 
         } 
 
 
def bfs_paths(romania_map, mulai, tujuan): 
    queue = [(mulai, [mulai])]     while queue: 
        (vertex, path) = queue.pop(0)         for next in romania_map[vertex] - set(path): 
            if next == tujuan:                 yield path + [next]             else: 
                queue.append((next, path + [next])) 
 
print("Jalur yang dilalui BFS romania_map adalah : ") list(bfs_paths(romania_map, "Arad", "Bucharest"))  print(list(bfs_paths(romania_map, "Arad", "Bucharest")) ) 
 
DFS 
 
def dfs_paths(romania_map, mulai, tujuan): 
    stack = [(mulai, [mulai])]     while stack: 
        (vertex, path) = stack.pop()         for next in romania_map[vertex] - set(path):             if next == tujuan:                 yield path + [next]             else: 
                stack.append((next, path + [next])) 
romania_map = {"Arad": set ( ["Zerind", "Sibiu", "Timisoara"]), 
         "Sibiu": set (["Faragas", "Rimnicu", "Oradeo"]), 
         "Zerind": set (["Oradeo"]), 
         "Oradeo": set ([]), 
         "Timisoara": set (["Lugoj"]), 
         "Lugoj": set (["Mehadia"]), 
         "Mehadia": set (["Drobeta"]), 
         "Drobeta" : set (["Craiova"]), 
         "Rimnicu": set (["Craiova", "Pitesti"]), 
         "Craiova": set ( ["Pitesti"]), 
         "Faragas" : set (["Bucharest"]), 
         "Pitesti" : set (["Bucharest"]), 
         "Bucharest" : set (["Urziceni", "Giurgiu"]), 
         "Urziceni" : set (["Hirsova", "Vaslui"]), 
         "Giurgiu" : set ([]), 
         "Hirsova" : set (["Eforie"]), 
         "Eforie" : set([]), 
         "Vaslui" : set (["Iasi"]), 
         "Iasi" : set (["Neamt"]), 
         "Neamt" : set([]) 
         } 
print("Jalur yang dilalui DFS adalah : ") list(dfs_paths(romania_map, "Arad", "Bucharest")) print (list(dfs_paths(romania_map, "Arad", "Bucharest"))) 
 
UCS 
 
# -*- coding: utf-8 -*- 
""" 
""" 
import queue as Q 
 
def search(graph, mulai, tujuan):     if mulai not in graph: 
        raise TypeError(str(mulai) + ' not found in graph !')         return     if tujuan not in graph: 
        raise TypeError(str(tujuan) + ' not found in graph !')         return 
     
    queue = Q.PriorityQueue()     queue.put((0, [mulai])) 
     
    while not queue.empty():         node = queue.get() 
        current = node[1][len(node[1]) - 1] 
         
        if tujuan in node[1]: 
            print("Path found: " + str(node[1]) + ", Cost = " + str(node[0]))             break 
         
        cost = node[0]         for neighbor in graph[current]:             temp = node[1][:]             temp.append(neighbor)             queue.put((cost + graph[current][neighbor], temp)) 
         
def readGraph(): 
    lines = int( input() )     graph = {} 
     
    for line in range(lines): 
        line = input() 
             
        tokens = line.split()         node = tokens[0]         graph[node] = {} 
         
        for i in range(1, len(tokens) - 1, 2): 
            # print(node, tokens[i], tokens[i + 1]) 
            # graph.addEdge(node, tokens[i], int(tokens[i + 1]))             graph[node][tokens[i]] = int(tokens[i + 1])     return graph 
 
def main(): 
    graph = readGraph()     search(graph, 'Arad', 'Bucharest') 
     
if __name__ == "__main__": 
    main() 
     
""" 
Map: 
 
14 
Arad Zerind 75 Timisoara 118 Sibiu 140 
Zerind Oradea 71 Arad 75 
Timisoara Arad 118 Lugoj 111 
Sibiu Arad 140 Oradea 151 Fagaras 99 RimnicuVilcea 80 
Oradea Zerind 71 Sibiu 151 
Lugoj Timisoara 111 Mehadia 70 
RimnicuVilcea Sibiu 80 Pitesti 97 Craiova 146 
Mehadia Lugoj 70 Dobreta 75 
Craiova Dobreta 120 RimnicuVilcea 146 Pitesti 138 
Pitesti RimnicuVilcea 97 Craiova 138 Bucharest 101 
Fagaras Sibiu 99 Bucharest 211 
Dobreta Mehadia 75 Craiova 120 
Bucharest Fagaras 211 Pitesti 101 Giurgiu 90 
Giurgiu Bucharest 90 
""" 
 
print(search(graph,'Arad','Bucharest')) 
 
 
B. Pembahasan Soal Kedua 
  
 
 
1. Breadth First Search 
 
Berikut adalah program algoritma BFS pada python: 
 
peta1 =  { 
          1:set([2,3]), 
      2:set([4,5]), 
      3:set([6,7]), 
      4:set([8,9]), 
      5:set([10,11]), 
      6:set([12,13]), 
      7:set([14,15]) 
      } 
 
def bfs(graf, mulai, tujuan): 
    queue = [[mulai]]     visited = set() 
 
    while queue:      
         	 	#masukkan antrian paling depan ke variabel jalur         jalur = queue.pop(0) 
 # simpan node yang dipilih ke variabel state, misal jalur = C,B maka simpan B ke variabel state 
        state = jalur[-1] 
 
       	  # cek state apakah sama dengan tujuan, jika ya maka return jalur         if state == tujuan: 
            return jalur 
          # jika state tidak sama dengan tujuan, maka cek apakah state tidak ada di visited         elif state not in visited: 
             	 # jika state tidak ada di visited maka cek cabang             for cabang in graf.get(state, []): #cek semua cabang dari state 
                jalur_baru = list(jalur) #masukkan isi dari variabel jalur ke variabel jalur_baru                 jalur_baru.append(cabang) #update/tambah isi jalur_baru dengan cabang                 queue.append(jalur_baru) #update/tambah queue dengan jalur_baru 
 
             # tandai state yang sudah dikunjungi sebagai visited             visited.add(state) 
 
 
        #cek isi antrian         isi = len(queue)         if isi == 0: 
            print("Tidak ditemukan") 
 
list( bfs(peta1,1,11)) print(list(bfs(peta1,1,11))) 
 
Output yang di hasilkan adalah sebagai berikut: 
[1, 2, 3, 4, 5, 6, 7, 11] 
 
Sedangkan untuk goal state = 14 
Output yangdihasilkan adalah sebagai berikut : 
[1, 2, 3, 4, 5, 6, 7, 14] 
 
2. Depth First Search Berikut adalah program algoritma DFS: 
 
peta={1:set([2,3]), 
      2:set([4,5]), 
      3:set([6,7]), 
      4:set([8,9]), 
      5:set([10,11]), 
      6:set([12,13]), 
      7:set([14,15])} 
 
def dfs (graf,mulai,tujuan): 
    mulai=[[mulai]]     visited=set() 
     
    while mulai : 
        length_of_path=len(mulai)-1         path=mulai.pop(length_of_path)         state=path[-1] 
         
        if state == tujuan:             return path         elif state not in visited :             for branch in graf.get(state,[]):                 new_path=list(path)                 new_path.append(branch)                 mulai.append(new_path) 
                 
                visited.add(state) 
                 
                content=len (start)                 if content == 0 : 
                    print("Tidak ditemukan ") print("Menggunakan metode DFS :") 
print ("Node yang dilalui oleh 1 ke 11 : " )                     list(dfs(peta,1,11))     print(list(dfs(peta,1,11))) 
 
 
print ("Node yang dilalui oleh 1 ke 14 : " )                     list(dfs(peta,1,14))     print(list(dfs(peta,1,14))) print ("") 
         
Output yang di hasilkan adalah sebagai berikut: 
Menggunakan metode DFS : 
Node yang dilalui oleh 1 ke 11 :  [1, 2, 5, 11] 
Node yang dilalui oleh 1 ke 14 :  
[1, 3, 7, 14] 
